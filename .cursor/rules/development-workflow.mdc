# Development Workflow

## Project Setup

### Prerequisites
- Node.js (v18+)
- MySQL (v8.0+)
- Git

### Initial Setup
1. **Clone and install dependencies:**
   ```bash
   # Frontend
   cd client
   npm install
   
   # Backend
   cd ../server
   npm install
   ```

2. **Database setup:**
   ```bash
   # Create database and tables
   mysql -u root -p < server/database/schema.sql
   ```

3. **Environment variables:**
   - Create `.env` files for sensitive data
   - Set JWT_SECRET for production

## Development Commands

### Frontend (React)
```bash
cd client
npm run dev          # Start development server (Vite)
npm run build        # Build for production
npm run preview      # Preview production build
npm run lint         # Run ESLint
```

### Backend (Express)
```bash
cd server
npm run dev          # Start with nodemon (auto-restart)
npm start            # Start production server
```

## Development Workflow

### 1. Feature Development
- Create feature branches from main
- Follow conventional commit messages
- Test both frontend and backend changes

### 2. Code Organization
- **Frontend**: Components in `client/src/components/`
- **Backend**: Routes organized by feature in `server/server.js`
- **Database**: Schema changes in `server/database/schema.sql`

### 3. Testing Strategy
- Test API endpoints with Postman/Insomnia
- Test React components manually
- Verify QR code generation and scanning
- Test file upload functionality

### 4. Deployment Checklist
- [ ] Environment variables configured
- [ ] Database schema updated
- [ ] File upload directory exists
- [ ] CORS settings for production
- [ ] JWT secret changed from default

## Best Practices

### Code Quality
- Use "ANCHOR" comments for major sections
- Follow ESLint rules for frontend
- Use consistent error handling patterns
- Implement proper input validation

### Security
- Never commit sensitive data (passwords, API keys)
- Use environment variables for configuration
- Validate all user inputs
- Implement proper authentication checks

### Performance
- Optimize image uploads (compress if needed)
- Use connection pooling for database
- Implement proper caching strategies
- Monitor server performance

### File Structure
```
gemstone-app/
├── client/                 # React frontend
│   ├── src/
│   │   ├── components/     # Reusable components
│   │   ├── pages/         # Route components
│   │   ├── context/       # React context
│   │   └── assets/        # Static assets
│   └── public/            # Public assets
├── server/                # Express backend
│   ├── database/          # Database schema
│   ├── public/            # Static files (uploads)
│   └── server.js          # Main server file
└── .cursor/rules/         # Cursor rules
```

## Troubleshooting

### Common Issues
1. **Database connection failed**: Check MySQL service and credentials
2. **CORS errors**: Verify CORS configuration in server
3. **File upload fails**: Check upload directory permissions
4. **JWT token invalid**: Verify token format and secret

### Debug Tips
- Use console.log for debugging (remove in production)
- Check browser network tab for API calls
- Verify database queries with MySQL client
- Test QR codes with mobile camera app
description:
globs:
alwaysApply: false
---
