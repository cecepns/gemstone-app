# Project Structure Guide

This is a full-stack gemstone verification application with React frontend and Node.js/Express backend.

## Architecture Overview
- **Frontend**: React 19 with Vite, Tailwind CSS, React Router DOM
- **Backend**: Node.js/Express with MySQL database
- **Authentication**: JWT-based admin authentication
- **File Upload**: Multer for gemstone image uploads
- **QR Code**: QR code generation for gemstone verification

## Key Entry Points
- **Frontend**: [client/src/main.jsx](mdc:client/src/main.jsx) â†’ [client/src/App.jsx](mdc:client/src/App.jsx)
- **Backend**: [server/server.js](mdc:server/server.js)
- **Database**: [server/database/schema.sql](mdc:server/database/schema.sql)

## Frontend Structure
- **Components**: [client/src/components/](mdc:client/src/components/) - Reusable UI components
- **Pages**: [client/src/pages/](mdc:client/src/pages/) - Route-specific page components
- **Context**: [client/src/context/AuthContext.jsx](mdc:client/src/context/AuthContext.jsx) - Authentication state management
- **Styling**: [client/src/tailwind.css](mdc:client/src/tailwind.css) - Tailwind CSS configuration

## Backend Structure
- **Server**: [server/server.js](mdc:server/server.js) - Main Express server with all routes
- **Database**: MySQL with connection pool configuration
- **Authentication**: JWT middleware for protected routes
- **File Upload**: Multer configuration for image uploads

## Key Features
1. **Public Verification**: QR code scanning for gemstone verification
2. **Admin Dashboard**: Protected admin panel for gemstone management
3. **Image Upload**: Gemstone photo upload with validation
4. **Authentication**: Secure admin login with JWT tokens
description:
globs:
alwaysApply: false
---
